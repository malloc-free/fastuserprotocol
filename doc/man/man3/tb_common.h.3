.TH "src/tb_common.h" 3 "Wed Feb 12 2014" "Version 0.2" "TestBed" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/tb_common.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include <sys/socket\&.h>\fP
.br
\fC#include <time\&.h>\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBtb_time_t\fP"
.br
.RI "\fIA struct to hold start, stop and elapsed times\&. \fP"
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBBLACK\fP   '\\x1b[22;30m'"
.br
.ti -1c
.RI "#define \fBRED\fP   '\\x1b[22;31m'"
.br
.ti -1c
.RI "#define \fBGREEN\fP   '\\x1b[22;32m'"
.br
.ti -1c
.RI "#define \fBBLUE\fP   '\\x1b[22;34m'"
.br
.ti -1c
.RI "#define \fBRESET\fP   '\\x1b[39m'"
.br
.ti -1c
.RI "#define \fBCLEAR\fP   '\\x1b[2J'"
.br
.ti -1c
.RI "#define \fBLINE\fP   '\\n===================================\\n'"
.br
.ti -1c
.RI "#define \fBMOVE_CSR\fP(n, m)   '\\x1b[' #n ';' #m 'H'"
.br
.ti -1c
.RI "#define \fBACK\fP(str)   \fBGREEN\fP str \fBRESET\fP"
.br
.ti -1c
.RI "#define \fBERR\fP(str)   \fBRED\fP str \fBRESET\fP"
.br
.ti -1c
.RI "#define \fBINFO\fP(str)   \fBBLUE\fP str \fBRESET\fP"
.br
.ti -1c
.RI "#define \fBPRT_ERR\fP(str)   fprintf(stderr, \fBERR\fP(str) '\\n')"
.br
.ti -1c
.RI "#define \fBPRT_ACK\fP(str)   fprintf(stdout, \fBACK\fP(str) '\\n')"
.br
.ti -1c
.RI "#define \fBPRT_INFO\fP(str)   fprintf(stdout, \fBINFO\fP(str) '\\n')"
.br
.ti -1c
.RI "#define \fBPRT_ERR_PARAM\fP(str, mod, param)   fprintf(stderr, \fBACK\fP(str)mod, param)"
.br
.ti -1c
.RI "#define \fBPRT_I_D\fP(str, num)   fprintf(stdout, \fBINFO\fP(str) '\\n', num)"
.br
.ti -1c
.RI "#define \fBPRT_I_S\fP(str, s)   fprintf(stdout, \fBINFO\fP(str) ':%s\\n', s)"
.br
.ti -1c
.RI "#define \fBPRT_E_S\fP(str, s)   fprintf(stdout, \fBERR\fP(str) ':%s', s)"
.br
.ti -1c
.RI "#define \fBLOG\fP(l, i, t)   if(l->log_enabled) \fBtb_write_log\fP(l->log_info, i, t)"
.br
.ti -1c
.RI "#define \fBLOG_ERR\fP(l, i)   \fBPRT_ERR\fP(i) if(l->log_enabled) \fBtb_write_log\fP(l->log_info, i, t)"
.br
.ti -1c
.RI "#define \fBLOG_ADD\fP(l, i, s)   if(l->log_enabled) \fBtb_address\fP(l, i, s)"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBtb_print_address\fP (struct sockaddr_storage *store) __attribute__((always_inline))"
.br
.ti -1c
.RI "char * \fBtb_get_address\fP (struct sockaddr_storage *store) __attribute__((always_inline))"
.br
.ti -1c
.RI "\fBtb_time_t\fP * \fBtb_create_time\fP (clockid_t clk_id)"
.br
.RI "\fICreate a time struct\&. \fP"
.ti -1c
.RI "void \fBtb_destroy_time\fP (\fBtb_time_t\fP *time)"
.br
.RI "\fIDestroy a \fBtb_time_t\fP struct\&. \fP"
.ti -1c
.RI "void \fBtb_start_time\fP (\fBtb_time_t\fP *time) __attribute__((always_inline))"
.br
.RI "\fIRecord the start time\&. \fP"
.ti -1c
.RI "void \fBtb_finish_time\fP (\fBtb_time_t\fP *time) __attribute__((always_inline))"
.br
.RI "\fIRecord the finish time\&. \fP"
.ti -1c
.RI "void \fBtb_calculate_time\fP (\fBtb_time_t\fP *time) __attribute__((always_inline))"
.br
.RI "\fICalculate the time difference between start and stop\&. \fP"
.ti -1c
.RI "char * \fBtb_create_test_file\fP (char *file_name, int *file_size)"
.br
.RI "\fILoad the file to be used for sending using the cilent\&. \fP"
.ti -1c
.RI "char * \fBtb_load_test_file\fP (char *file_name, int *file_size)"
.br
.RI "\fILoad file\&. \fP"
.ti -1c
.RI "char * \fBtb_load_random_file\fP (int size)"
.br
.RI "\fILoad random file of specified size\&. \fP"
.ti -1c
.RI "char * \fBtb_create_random\fP (char *path, int size)"
.br
.RI "\fICreate a random file\&. \fP"
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define ACK(str)   \fBGREEN\fP str \fBRESET\fP"

.PP
Definition at line 22 of file tb_common\&.h\&.
.SS "#define BLACK   '\\x1b[22;30m'"

.PP
Definition at line 14 of file tb_common\&.h\&.
.SS "#define BLUE   '\\x1b[22;34m'"

.PP
Definition at line 17 of file tb_common\&.h\&.
.SS "#define CLEAR   '\\x1b[2J'"

.PP
Definition at line 19 of file tb_common\&.h\&.
.SS "#define ERR(str)   \fBRED\fP str \fBRESET\fP"

.PP
Definition at line 23 of file tb_common\&.h\&.
.SS "#define GREEN   '\\x1b[22;32m'"

.PP
Definition at line 16 of file tb_common\&.h\&.
.SS "#define INFO(str)   \fBBLUE\fP str \fBRESET\fP"

.PP
Definition at line 24 of file tb_common\&.h\&.
.SS "#define LINE   '\\n===================================\\n'"

.PP
Definition at line 20 of file tb_common\&.h\&.
.SS "#define LOG(l, i, t)   if(l->log_enabled) \fBtb_write_log\fP(l->log_info, i, t)"

.PP
Definition at line 33 of file tb_common\&.h\&.
.SS "#define LOG_ADD(l, i, s)   if(l->log_enabled) \fBtb_address\fP(l, i, s)"

.PP
Definition at line 35 of file tb_common\&.h\&.
.SS "#define LOG_ERR(l, i)   \fBPRT_ERR\fP(i) if(l->log_enabled) \fBtb_write_log\fP(l->log_info, i, t)"

.PP
Definition at line 34 of file tb_common\&.h\&.
.SS "#define MOVE_CSR(n, m)   '\\x1b[' #n ';' #m 'H'"

.PP
Definition at line 21 of file tb_common\&.h\&.
.SS "#define PRT_ACK(str)   fprintf(stdout, \fBACK\fP(str) '\\n')"

.PP
Definition at line 26 of file tb_common\&.h\&.
.SS "#define PRT_E_S(str, s)   fprintf(stdout, \fBERR\fP(str) ':%s', s)"

.PP
Definition at line 31 of file tb_common\&.h\&.
.SS "#define PRT_ERR(str)   fprintf(stderr, \fBERR\fP(str) '\\n')"

.PP
Definition at line 25 of file tb_common\&.h\&.
.SS "#define PRT_ERR_PARAM(str, mod, param)   fprintf(stderr, \fBACK\fP(str)mod, param)"

.PP
Definition at line 28 of file tb_common\&.h\&.
.SS "#define PRT_I_D(str, num)   fprintf(stdout, \fBINFO\fP(str) '\\n', num)"

.PP
Definition at line 29 of file tb_common\&.h\&.
.SS "#define PRT_I_S(str, s)   fprintf(stdout, \fBINFO\fP(str) ':%s\\n', s)"

.PP
Definition at line 30 of file tb_common\&.h\&.
.SS "#define PRT_INFO(str)   fprintf(stdout, \fBINFO\fP(str) '\\n')"

.PP
Definition at line 27 of file tb_common\&.h\&.
.SS "#define RED   '\\x1b[22;31m'"

.PP
Definition at line 15 of file tb_common\&.h\&.
.SS "#define RESET   '\\x1b[39m'"

.PP
Definition at line 18 of file tb_common\&.h\&.
.SH "Function Documentation"
.PP 
.SS "void tb_calculate_time (\fBtb_time_t\fP *time)\fC [inline]\fP"

.PP
Calculate the time difference between start and stop\&. 
.PP
Definition at line 80 of file tb_common\&.c\&.
.SS "char* tb_create_random (char *path, intsize)"

.PP
Create a random file\&. 
.PP
Definition at line 182 of file tb_common\&.c\&.
.SS "char* tb_create_test_file (char *file_name, int *file_size)"

.PP
Load the file to be used for sending using the cilent\&. \fBParameters:\fP
.RS 4
\fIlistener\fP The listener to create the file for\&. 
.RE
.PP

.PP
Definition at line 89 of file tb_common\&.c\&.
.SS "\fBtb_time_t\fP* tb_create_time (clockid_tclk_id)"

.PP
Create a time struct\&. \fBParameters:\fP
.RS 4
\fIclk_id\fP The id of the type of clock to use\&. 
.RE
.PP

.PP
Definition at line 47 of file tb_common\&.c\&.
.SS "void tb_destroy_time (\fBtb_time_t\fP *time)"

.PP
Destroy a \fBtb_time_t\fP struct\&. 
.PP
Definition at line 59 of file tb_common\&.c\&.
.SS "void tb_finish_time (\fBtb_time_t\fP *time)\fC [inline]\fP"

.PP
Record the finish time\&. 
.PP
Definition at line 73 of file tb_common\&.c\&.
.SS "char* tb_get_address (struct sockaddr_storage *store)\fC [inline]\fP"

.PP
Definition at line 26 of file tb_common\&.c\&.
.SS "char* tb_load_random_file (intsize)"

.PP
Load random file of specified size\&. Loads a pre-generated file of the specified size, or generates it if it does not exist\&. 
.PP
Definition at line 148 of file tb_common\&.c\&.
.SS "char* tb_load_test_file (char *file_name, int *file_size)"

.PP
Load file\&. 
.PP
Definition at line 118 of file tb_common\&.c\&.
.SS "void tb_print_address (struct sockaddr_storage *store)\fC [inline]\fP"

.PP
Definition at line 18 of file tb_common\&.c\&.
.SS "void tb_start_time (\fBtb_time_t\fP *time)\fC [inline]\fP"

.PP
Record the start time\&. 
.PP
Definition at line 67 of file tb_common\&.c\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for TestBed from the source code\&.

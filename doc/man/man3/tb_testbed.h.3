.TH "src/tb_testbed.h" 3 "Wed Feb 12 2014" "Version 0.2" "TestBed" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/tb_testbed.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include 'tb_protocol\&.h'\fP
.br
\fC#include 'tb_listener\&.h'\fP
.br
\fC#include 'tb_session\&.h'\fP
.br

.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBINPUT\fP { \fBTYPE\fP =  1, \fBADDRESS\fP, \fBPORT\fP, \fBPROT\fP, \fBBUF_SIZE\fP, \fBFILE_TYPE\fP, \fBFILE_NAME\fP }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBtb_listener_t\fP * \fBtb_create_listener\fP (\fBENDPOINT_TYPE\fP type, char *addr, char *port, \fBPROTOCOL\fP protocol, int bufsize)"
.br
.RI "\fICreate a listener with the supplied parameters\&. \fP"
.ti -1c
.RI "\fBtb_listener_t\fP * \fBtb_create_endpoint\fP (\fBtb_test_params_t\fP *params)"
.br
.RI "\fICreate a listener using a \fBtb_test_params_t\fP struct\&. \fP"
.ti -1c
.RI "\fBtb_prot_stats_t\fP * \fBtb_get_protocol_stats\fP (\fBtb_listener_t\fP *listener)"
.br
.ti -1c
.RI "\fBtb_prot_stats_t\fP * \fBtb_ex_get_stats\fP (\fBtb_listener_t\fP *listener)"
.br
.RI "\fIA thread safe way to get access to stats\&. \fP"
.ti -1c
.RI "int \fBtb_parse\fP (int argc, char *argv[])"
.br
.RI "\fIParse input from a number of strings\&. \fP"
.ti -1c
.RI "int \fBtest\fP ()"
.br
.ti -1c
.RI "void \fBtb_start\fP (\fBtb_listener_t\fP *listener)"
.br
.RI "\fIStarts the server/client\&. \fP"
.ti -1c
.RI "int \fBtb_monitor\fP (\fBtb_listener_t\fP *listener)"
.br
.RI "\fIactively monitor the server/client connection \fP"
.ti -1c
.RI "void \fBtb_print_stats\fP (\fBtb_prot_stats_t\fP *stats, \fBtb_listener_t\fP *listener)"
.br
.RI "\fIPrint the stats given\&. \fP"
.ti -1c
.RI "void \fBtb_interrupt_handler\fP (int value)"
.br
.RI "\fIHandle system interrupts\&. \fP"
.ti -1c
.RI "void \fBtb_abort\fP (void *data) __attribute__((__noreturn__))"
.br
.RI "\fIAborts program\&. \fP"
.ti -1c
.RI "void \fBtb_exit\fP (void *data) __attribute__((__noreturn__))"
.br
.RI "\fIExits program\&. \fP"
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "const int \fBC_BUFF_SIZE\fP"
.br
.RI "\fIThe client buffer multiplier\&. \fP"
.ti -1c
.RI "const int \fBS_BUFF_SIZE\fP"
.br
.RI "\fIThe server buffer multiplier\&. \fP"
.in -1c
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBINPUT\fP"

.PP
\fBEnumerator: \fP
.in +1c
.TP
\fB\fITYPE \fP\fP
The type of endpoint to create (server, client) 
.TP
\fB\fIADDRESS \fP\fP
The address to bind/connect to\&. 
.TP
\fB\fIPORT \fP\fP
The port to bind/connect to\&. 
.TP
\fB\fIPROT \fP\fP
The protocol to use\&. 
.TP
\fB\fIBUF_SIZE \fP\fP
The size of the application buffer to use\&. 
.TP
\fB\fIFILE_TYPE \fP\fP
The type of file to use (disk file, random RAM file) 
.TP
\fB\fIFILE_NAME \fP\fP
The name of the file or the size of the random file To use\&. 
.PP
Definition at line 18 of file tb_testbed\&.h\&.
.SH "Function Documentation"
.PP 
.SS "void tb_abort (void *data)"

.PP
Aborts program\&. Aborts the program, closes the listener and underlying protocol, kills any sockets or files still open\&.
.PP
\fBParameters:\fP
.RS 4
\fIlistener\fP The listener to close/destroy\&. 
.RE
.PP

.PP
Definition at line 445 of file tb_testbed\&.c\&.
.SS "\fBtb_listener_t\fP* tb_create_endpoint (\fBtb_test_params_t\fP *params)"

.PP
Create a listener using a \fBtb_test_params_t\fP struct\&. The details in the struct are used to create an endpoint for use in testing\&.
.PP
\fBParameters:\fP
.RS 4
\fIparams\fP A struct with all of the required details for a test\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the endpoint to test with\&. 
.RE
.PP

.PP
Definition at line 158 of file tb_listener\&.c\&.
.SS "\fBtb_listener_t\fP* tb_create_listener (\fBENDPOINT_TYPE\fPtype, char *addr, char *port, \fBPROTOCOL\fPprotocol, intbufsize)"

.PP
Create a listener with the supplied parameters\&. Creates a listener and the accociated data structures\&.
.PP
\fBParameters:\fP
.RS 4
\fItype\fP The type of endpoint to create\&. 
.br
\fIaddr\fP The address to bind to\&. 
.br
\fIport\fP The port to bind to\&. 
.br
\fInum_threads\fP The number of worker threads to use\&.
.RE
.PP
\fBReturns:\fP
.RS 4
The newly created listener\&. 
.RE
.PP

.PP
Definition at line 38 of file tb_listener\&.c\&.
.SS "\fBtb_prot_stats_t\fP* tb_ex_get_stats (\fBtb_listener_t\fP *listener)"

.PP
A thread safe way to get access to stats\&. This method controls access to the stats generated by testbed\&. These stats are updated every second, and can be read once\&. If the data that can be obtained by this function has already been read, it blocks until new data has arrived\&.
.PP
\fBParameters:\fP
.RS 4
\fIlistener\fP The listener for which to get the stats from\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBtb_prot_stats_t\fP with the stats inserted\&. 
.RE
.PP

.PP
Definition at line 362 of file tb_listener\&.c\&.
.SS "void tb_exit (void *data)"

.PP
Exits program\&. Exits the program, closes the listener and underlying protocol, kills any sockes or files still open\&.
.PP
\fBParameters:\fP
.RS 4
\fIlistener\fP The listener to close/destroy\&. 
.RE
.PP

.PP
Definition at line 434 of file tb_testbed\&.c\&.
.SS "\fBtb_prot_stats_t\fP* tb_get_protocol_stats (\fBtb_listener_t\fP *listener)"

.SS "void tb_interrupt_handler (intvalue)"

.PP
Handle system interrupts\&. Handles system interrupts, and kills the client/server if one is received\&.
.PP
\fBParameters:\fP
.RS 4
\fIvalue\fP Value passed by the signal\&. 
.RE
.PP

.SS "int tb_monitor (\fBtb_listener_t\fP *listener)"

.PP
actively monitor the server/client connection \fBParameters:\fP
.RS 4
\fIlistener\fP The listener to monitor\&. 
.RE
.PP

.PP
Definition at line 300 of file tb_testbed\&.c\&.
.SS "int tb_parse (intargc, char *argv[])"

.PP
Parse input from a number of strings\&. Parses values from strings, to create a server or client
.PP
\fBParameters:\fP
.RS 4
\fIargc\fP The number of input strings\&. 
.br
\fIargv\fP The strings\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if the setup was successful\&.
.RE
.PP
argv[0] = TestBed argv[1] = Type (server, client) argv[2] = Address argv[3] = Port argv[4] = Protocol (tcp, udp, udt) argv[5] = Bufsize (MB) argv[6] = File type (size, file) argv[7] = Filename/Fliesize 
.PP
Definition at line 63 of file tb_testbed\&.c\&.
.SS "void tb_print_stats (\fBtb_prot_stats_t\fP *stats, \fBtb_listener_t\fP *listener)"

.PP
Print the stats given\&. \fBParameters:\fP
.RS 4
\fIstats\fP The stats struct to print\&. 
.br
\fIlistener\fP The listener to print stats for\&. 
.RE
.PP

.PP
Definition at line 401 of file tb_testbed\&.c\&.
.SS "void tb_start (\fBtb_listener_t\fP *listener)"

.PP
Starts the server/client\&. This begins the server or client\&. Filename can be null if the endpoint is a server\&.
.PP
\fBParameters:\fP
.RS 4
\fIlistener\fP The listener to start\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if performed\&. 
.RE
.PP

.PP
Definition at line 211 of file tb_testbed\&.c\&.
.SS "int test ()"

.PP
Definition at line 45 of file tb_testbed\&.c\&.
.SH "Variable Documentation"
.PP 
.SS "const int C_BUFF_SIZE"

.PP
The client buffer multiplier\&. The size provided by the user at run time is multiplied by this number to generate the buffer size\&. 
.SS "const int S_BUFF_SIZE"

.PP
The server buffer multiplier\&. The size provided by the user at run time is multiplited by this number to generate the buffer size\&. 
.SH "Author"
.PP 
Generated automatically by Doxygen for TestBed from the source code\&.
